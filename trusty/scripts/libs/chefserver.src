#!/bin/sh

. ${SCRIPTLIB}/common.src

fetch_chefserver() {
  ##### Verify Variables Set
  [ -z "${PKG_MANIFEST}" ] && error "PKG_MANIFEST not set. Aborting"
  [ -z "${PKG_PATH}" ] && error "PKG_PATH not set. Aborting"
  ##### Fetch Package and Package URL variables
  PACKAGE=$(grep 'server' ${PKG_MANIFEST} | cut -d, -f2)
  eval PKG_URL=$(grep 'server' ${PKG_MANIFEST} | cut -d, -f3)

  ##### Download Packages
  fetch $PACKAGE $PKG_URL
}

setup_apparmor() {
  ##### SET APPARMOR TO COMPLAIN MODE
  apt-get install -y apparmor-utils
  sudo aa-complain /etc/apparmor.d/*
}

remove_apparmor() {
  ##### REMOVE APPARMOR
  invoke-rc.d apparmor kill
  update-rc.d -f apparmor remove
}

install_chefserver() {
  ##### Verify Variables Set
  [ -z "${PKG_MANIFEST}" ] && error "PKG_MANIFEST not set. Aborting"
  [ -z "${PKG_PATH}" ] && error "PKG_PATH not set. Aborting"
  ##### Fetch Package Name
  PACKAGE=$(grep 'server' ${PKG_MANIFEST} | cut -d, -f2)

  ##### Install Package if it is available and not installed already
   [ -f "${PKG_PATH}/${PACKAGE}"  ] \
      && dpkg -s chef-server-core > /dev/null 2>&1 \
      || dpkg -i "${PKG_PATH}/${PACKAGE}"

  setup_apparmor
}

add_feature() {
  ##### Verify Variables Set
  [ -z "${PKG_MANIFEST}" ] && error "PKG_MANIFEST not set. Aborting"
  [ -z "${PKG_PATH}" ] && error "PKG_PATH not set. Aborting"

  FEATURE=${1}
  # check params

  ##### Install Managment Console
  PACKAGE=$(grep "${FEATURE}" "${PKG_MANIFEST}" | cut -d, -f2)

  if [ -f "${PKG_PATH}/${PACKAGE}" ]; then
    chef-server-ctl install opscode-${FEATURE} --path "${PKG_PATH}/${PACKAGE}"
  else
    chef-server-ctl install opscode-${FEATURE}
  fi

  chef-server-ctl reconfigure
  opscode-${FEATURE}-ctl reconfigure

}

# static function for now
user_create() {
  ##### ADMINISTRATION ACCOUNT
  ADMIN_USER_NAME="vagrant"
  ADMIN_FIRST_NAME="vagrant"
  ADMIN_LAST_NAME="vagrant"
  ADMIN_EMAIL="vagrant@chefserver.dev"
  ADMIN_PASSWORD="vagrant"

  chef-server-ctl user-create ${ADMIN_USER_NAME} ${ADMIN_FIRST_NAME} ${ADMIN_LAST_NAME} ${ADMIN_EMAIL} ${ADMIN_PASSWORD} --filename ${ADMIN_USER_NAME}.pem
  cp -v ${ADMIN_USER_NAME}.pem /vagrant/.chef

}

# static function for now
org_create() {
  ##### ORGANITATION
  ORG_LONG_NAME="Vagrant Development Team"
  ORG_SHORT_NAME="vagrantdev"
  ORG_ASSOC_USER="vagrant"

  chef-server-ctl org-create ${ORG_SHORT_NAME} ${ORG_LONG_NAME} --association_user ${ORG_ASSOC_USER} -f ${ORG_SHORT_NAME}-validator.pem
  cp -v ${ORG_SHORT_NAME}-validator.pem /vagrant/.chef

}

config_chefserver() {
  ##### Verify Variables Set
  [ -z "${PKG_MANIFEST}" ] && error "PKG_MANIFEST not set. Aborting"
  [ -z "${PKG_PATH}" ] && error "PKG_PATH not set. Aborting"

  # INITIAL CONFIGURATION
  cat <<-CHEFSRVR_EOF > /etc/opscode/chef-server.rb
  server_name = "chefserver"
  api_fqdn server_name
  bookshelf['vip'] = server_name
  nginx['url'] = "https://#{server_name}"
  nginx['server_name'] = server_name
  nginx['ssl_certificate'] = "/var/opt/opscode/nginx/ca/#{server_name}.crt"
  nginx['ssl_certificate_key'] = "/var/opt/opscode/nginx/ca/#{server_name}.key"
CHEFSRVR_EOF

  ##### Update
  chef-server-ctl reconfigure

  ##### Add Features
  add_feature manage
  add_feature reporting

  ##### Create User/Org
  user_create
  org_create

}
